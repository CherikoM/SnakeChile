{"version":3,"file":"index.js","sources":["../src/utils/getRandomNumber.ts","../src/ts/Snake.ts","../src/ts/SnakeGameDOM.ts","../src/ts/Food.ts","../src/ts/SnakeGame.ts","../src/index.ts"],"sourcesContent":["/**\r\n * 获取指定范围内的随机整数\r\n * @param min 最小（包含）\r\n * @param max 最大（不包含）\r\n * @returns \r\n */\r\nexport function getRandomNumber(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min) + min)\r\n}","import type { Index, dirNum } from \"../types/types\"\r\nimport { getRandomNumber } from \"../utils/getRandomNumber.js\"\r\n\r\nexport enum SnakeDirection {\r\n  UP = 1,\r\n  RIGHT = 2,\r\n  DOWN = 3,\r\n  LEFT = 4\r\n}\r\n\r\nexport class Snake {\r\n\r\n  private snakeIndex: Index[] = []\r\n  private perviousLastIndex: Index = [0, 0]\r\n  private dir: dirNum = 1\r\n  private go: Index[] = [[0, 0], [0, -1], [1, 0], [0, 1], [-1, 0]]\r\n\r\n  constructor(private width: number, private height: number) {\r\n    this.width = width\r\n    this.height = height\r\n  }\r\n\r\n  /**\r\n   * 新建一个随机三节的蛇\r\n   */\r\n  public newSnake(): void {\r\n\r\n    /**\r\n     * 判断是否是合理的第三个初始蛇身\r\n     * @param direction 方向\r\n     * @param param0 前一节身体\r\n     * @param param1 后一节身体\r\n     * @returns \r\n     */\r\n    const isAvalibleBody = (direction: dirNum = this.dir, [x, y]: Index = this.snakeIndex[0], [x2, y2]: Index = this.snakeIndex[1]): boolean => {\r\n      // debugger\r\n      const [x3, y3] = this.getNextIndex([x2, y2], direction)\r\n      if (this.isOut([x3, y3]) || (x3 === x && y3 === y)) {\r\n        return false\r\n      } else {\r\n        return true\r\n      }\r\n    }\r\n\r\n    /**\r\n     * 获得随机方向\r\n     * @returns \r\n     */\r\n    const getRandomDirection = ():dirNum => {\r\n      return getRandomNumber(1, 5) as dirNum\r\n    }\r\n\r\n\r\n    this.snakeIndex = []\r\n    const [x1, y1] = [getRandomNumber(0, this.width), getRandomNumber(0, this.height)]\r\n    // const [x1, y1] = [19,19]\r\n\r\n    // 获得第二个合理蛇身\r\n    let x2: number, y2: number\r\n    while (true) {\r\n      let direction = getRandomDirection()\r\n      const res = this.getNextIndex([x1, y1], direction)\r\n      if (!this.isOut(res)) {\r\n        x2 = res[0], y2 = res[1]\r\n        break\r\n      }\r\n    }\r\n\r\n    // 获得第三个合理蛇身\r\n    let x3: number, y3: number\r\n    while (true) {\r\n      let direction = getRandomDirection()\r\n      if (isAvalibleBody(direction, [x1, y1], [x2, y2])) {\r\n        const res = this.getNextIndex([x2, y2], direction)\r\n        x3 = res[0], y3 = res[1]\r\n        break\r\n      }\r\n    }\r\n\r\n    this.dir = this.getBodyDirection([x1, y1], [x2, y2]) as dirNum\r\n    this.snakeIndex.push([x1, y1], [x2, y2], [x3, y3])\r\n  }\r\n\r\n  /**\r\n   * 改变方向\r\n   * @param {*} direction \r\n   */\r\n  public changeDirection(direction: dirNum): void {\r\n    if(this.isAvalibleDiretion(direction)) {\r\n      this.dir = direction\r\n    }\r\n  }  \r\n\r\n  /**\r\n   * 判断是否是合理的方向（防止反方向走）\r\n   * @param direction 方向\r\n   * @param param1 \r\n   * @param param2 \r\n   * @returns \r\n   */\r\n  public isAvalibleDiretion(direction: dirNum = this.dir, [x, y]: Index = this.snakeIndex[0], [x2, y2]: Index = this.snakeIndex[1]): boolean {\r\n    // debugger\r\n    const [x3, y3] = this.getNextIndex([x, y], direction)\r\n    if (this.isOut([x3, y3]) || (x3 === x2 && y3 === y2)) {\r\n      return false\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 判断坐标是否越界\r\n   * @param {*} param0 \r\n   * @returns \r\n   */\r\n  public isOut([x, y]: Index): boolean {\r\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 判断蛇头是否撞到蛇身\r\n   * @param {*} param0 \r\n   * @returns \r\n   */\r\n  public isCrash([x, y]: Index): boolean {\r\n    for(let i = 0; i < this.snakeIndex.length-1; i++) {\r\n      if (x === this.snakeIndex[i][0] && y === this.snakeIndex[i][1]) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * 根据方向获得下一个坐标\r\n   * @param {*} param0 \r\n   * @param {*} direction \r\n   * @returns \r\n   */\r\n  public getNextIndex([x, y]: Index, direction: dirNum = this.dir): Index {\r\n    return [x + this.go[direction][0], y + this.go[direction][1]]\r\n  }\r\n\r\n  /**\r\n   * 根据方向获得上一个坐标\r\n   * @param param0 \r\n   * @param direction \r\n   * @returns \r\n   */\r\n  public getLastIndex([x, y]: Index, direction: dirNum = this.dir): Index {\r\n    return [x - this.go[direction][0], y - this.go[direction][1]]\r\n  }\r\n\r\n  /**\r\n   * 蛇移动\r\n   */\r\n  public move(): boolean {\r\n    // 储存移动前的蛇尾，如果此次移动中蛇吃到了东西，蛇变长，就可以将蛇尾恢复\r\n    this.perviousLastIndex = this.snakeIndex[this.snakeIndex.length - 1]\r\n    // debugger\r\n    const res = this.getNextIndex(this.snakeIndex[0])\r\n    // 蛇头撞到边界\r\n    if (this.isOut(res)) {\r\n      return false\r\n    }\r\n    // 蛇头撞到蛇身\r\n    else if (this.isCrash(res)) {\r\n      return false\r\n    }\r\n    // 成功的移动\r\n    else {\r\n      this.snakeIndex.unshift(res)\r\n      this.snakeIndex.pop()\r\n      return true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 蛇吃到东西\r\n   */\r\n  public eat(): void {\r\n    this.snakeIndex.push(this.perviousLastIndex)\r\n  }\r\n\r\n  /**\r\n   * 获取蛇\r\n   * @returns \r\n   */\r\n  public getSnake(): Index[] {\r\n    return this.snakeIndex\r\n  }\r\n\r\n  /**\r\n   * 获取蛇的长度\r\n   * @returns \r\n   */\r\n  public getSnakeLength(): number {\r\n    return this.snakeIndex.length\r\n  }\r\n\r\n  /**\r\n   * 获取前一节蛇相比后一节的走向\r\n   * @param param0 前一节\r\n   * @param param1 后一节\r\n   * @returns \r\n   */\r\n  public getBodyDirection([x1, y1]: Index, [x2, y2]: Index) {\r\n    const x = x1 - x2, y = y1 - y2\r\n    if(x === 0 && y === -1) {\r\n      return SnakeDirection.UP\r\n    } else if(x === 1 && y === 0) {\r\n      return SnakeDirection.RIGHT\r\n    } else if(x === 0 && y === 1) {\r\n      return SnakeDirection.DOWN\r\n    } else if(x === -1 && y === 0) {\r\n      return SnakeDirection.LEFT\r\n    } else {\r\n      return 0\r\n    }\r\n  }\r\n}\r\n\r\n","import { Index, dirNum } from \"../types/types.js\"\r\nimport { SnakeDirection } from \"./Snake.js\"\r\nimport { SnakeGame } from \"./SnakeGame.js\"\r\n\r\nenum SnakeClass {\r\n  // 蛇位置\r\n  SNAKE_HEAD = 'snake-head',\r\n  SNAKE_BODY_STR = 'snake-body-str',\r\n  SNAKE_BODY_CUR = 'snake-body-cur',\r\n  SNAKE_TAIL = 'snake-tail',\r\n  // 蛇方向\r\n  UP = 'up',\r\n  RIGHT = 'right',\r\n  DOWN = 'down',\r\n  LEFT = 'left',\r\n  // 蛇转弯时弧形的朝向\r\n  UP_RIGHT_QUADRANT = 'up-right-quadrant',\r\n  DOWN_RIGHT_QUADRANT = 'down-right-quadrant',\r\n  DOWN_LEFT_QUADRANT = 'down-left-quadrant',\r\n  UP_LEFT_QUADRANT = 'up-left-quadrant',\r\n  // 食物\r\n  FOOD = 'food'\r\n}\r\n\r\ntype DOMs <T extends HTMLElement> = {\r\n  container: T,\r\n  score: T,\r\n  counter: T,\r\n  gameBtn: T,\r\n  snake?: HTMLDivElement,\r\n  food?: HTMLDivElement\r\n}\r\n\r\nexport class SnakeGameDOM<T extends HTMLElement> {\r\n\r\n  private snakeGame: SnakeGame\r\n  private box: { width: number, height: number } = { width: 0, height: 0 }\r\n  private timer: number | undefined\r\n  private counting = false\r\n\r\n  constructor(private width: number, private height: number, private dom: DOMs<T>) {\r\n    this.dom = dom\r\n    this.width = width\r\n    this.height = height\r\n    this.snakeGame = new SnakeGame(this.width, this.height)\r\n    this.init()\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init () {\r\n    this.getBoxSize(this.width, this.height)\r\n    this.clickGameBtn()\r\n    this.changeBtnText('Start')\r\n    const snake = document.createElement('div')\r\n    const food = document.createElement('div')\r\n    const fragment = document.createDocumentFragment()\r\n    fragment.append(snake, food)\r\n    this.dom.container.append(fragment)\r\n    this.dom.snake = snake\r\n    this.dom.food = food\r\n  }\r\n\r\n  /**\r\n   * 绑定游戏按钮\r\n   */\r\n  public clickGameBtn () {\r\n    this.dom.gameBtn.addEventListener('click', ()=> {\r\n      // 正在倒计时时点击，不进行操作\r\n      if(this.isCounting()) return\r\n      // 未开始或暂停时点击，开始游戏\r\n      if(!this.isGaming() || this.isPausing()) {\r\n        this.start()\r\n      }\r\n      // 游戏进行时点击，暂停游戏\r\n      else {\r\n        this.pause()\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 开始游戏\r\n   */\r\n  public start() {\r\n    // 未开始时，开始新游戏\r\n    if(!this.isGaming()) {\r\n      this.snakeGame.start()\r\n      this.clearScore()\r\n      this.drawSnake()\r\n      this.drawFood()\r\n    }\r\n    // 暂停时，恢复游戏\r\n    if(this.isPausing()) {\r\n      this.snakeGame.resume()\r\n    }\r\n\r\n    // 等待倒计时\r\n    this.countDown().then(()=> {\r\n      // 每隔一段时间进行一次移动\r\n      this.timer = setInterval(() => {\r\n        this.move()\r\n      }, 500)\r\n\r\n      // 绑定键盘事件\r\n      document.addEventListener('keydown', this.changeDirection.bind(this))\r\n      this.changeBtnText('Pause')\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 倒计时\r\n   * @returns \r\n   */\r\n  public countDown () {\r\n    return new Promise(resolve=> {\r\n      // 现在正在倒计时\r\n      this.counting = true\r\n      this.setCounterText('3')\r\n      let count = 3\r\n\r\n      // 展开遮罩\r\n      this.showCounter()\r\n\r\n      // 进行倒计时\r\n      const timer = setInterval(() => {\r\n        if(count > 1) {\r\n          count--\r\n          this.setCounterText(count.toString())\r\n        } \r\n        // 倒计时结束\r\n        else {\r\n          clearInterval(timer)\r\n          this.counting = false\r\n          this.hideCounter()\r\n          resolve('')\r\n        }\r\n      }, 1000)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 结束游戏\r\n   */\r\n  public over () {\r\n    this.showCounter()\r\n    this.setCounterText('')\r\n    this.snakeGame.over()\r\n    // 移除定时器和键盘事件\r\n    clearInterval(this.timer)\r\n    document.removeEventListener('keydown', this.changeDirection.bind(this))\r\n    alert(`You stopped ${this.getScore()} Boliviaball${this.getScore() > 1 ? 's' : ''}!`)\r\n    this.changeBtnText('Start')\r\n  }\r\n\r\n  /**\r\n   * 蛇移动\r\n   */\r\n  public move () {\r\n    const res = this.snakeGame.move()\r\n    this.drawSnake()\r\n    // 蛇吃到食物，更新分数\r\n    if(res === 'eat') {\r\n      this.changeScore()\r\n      this.drawFood()\r\n    }\r\n    // 蛇撞到边界或自己，结束游戏\r\n    else if(!res) {\r\n      this.over()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 蛇改变方向\r\n   * @param e\r\n   */\r\n  public changeDirection (e: KeyboardEvent) {\r\n    switch (e.key) {\r\n      case 'ArrowUp':\r\n        this.snakeGame.changeDirection(SnakeDirection.UP)\r\n        break\r\n      case 'ArrowDown':\r\n        this.snakeGame.changeDirection(SnakeDirection.DOWN)\r\n        break\r\n      case 'ArrowLeft':\r\n        this.snakeGame.changeDirection(SnakeDirection.LEFT)\r\n        break\r\n      case 'ArrowRight':\r\n        this.snakeGame.changeDirection(SnakeDirection.RIGHT)\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更改分数\r\n   */\r\n  public changeScore() {\r\n    this.dom.score.innerText = String(this.getScore())\r\n  }\r\n\r\n  /**\r\n   * 获取单元盒的尺寸\r\n   * @param wNum \r\n   * @param hNum \r\n   * @returns \r\n   */\r\n  public getBoxSize(wNum: number, hNum: number) {\r\n    const { width, height } = this.dom.container.getBoundingClientRect()\r\n    this.box = { width: width / wNum, height: height / hNum }\r\n  }\r\n\r\n  /**\r\n   * 绘制游戏\r\n   */\r\n  public drawSnake() {\r\n\r\n    // 清空蛇\r\n    this.dom.snake!.replaceChildren()\r\n\r\n    // 绘制蛇\r\n    const fragment = document.createDocumentFragment()\r\n\r\n    for (let i = 0; i < this.snakeGame.getSnakeLength(); i++) {\r\n      const classes = this.getClasses(this.snakeGame.getSnake()[i-1] || [-1, -1], this.snakeGame.getSnake()[i], this.snakeGame.getSnake()[i + 1] || [-1, -1]) \r\n      const [x, y] = this.snakeGame.getSnake()[i]\r\n\r\n      const box = this.createBox([x, y], classes)\r\n\r\n      fragment.appendChild(box)\r\n\r\n    }\r\n\r\n    this.dom.snake!.appendChild(fragment)\r\n  }\r\n\r\n  /**\r\n   * 绘制食物\r\n   */\r\n  public drawFood () {\r\n    this.dom.food!.replaceChildren()\r\n    const food = this.createBox(this.snakeGame.getFood(), [SnakeClass.FOOD])\r\n    this.dom.food!.appendChild(food)\r\n  }\r\n\r\n  /**\r\n   * 创建一个盒子\r\n   * @param param0 \r\n   * @param classes \r\n   * @returns \r\n   */\r\n  public createBox([x, y]: Index, classes: string[]) {\r\n    const div = document.createElement('div')\r\n    div.classList.add('box', ...classes)\r\n    div.style.top = `${y * this.box.height - 1}px`\r\n    div.style.left = `${x * this.box.width - 1}px`\r\n    return div\r\n  }\r\n  \r\n  /**\r\n   * 判断这一节蛇应该使用什么类\r\n   * @param param0 前一个坐标\r\n   * @param param1 需判断的坐标\r\n   * @param param2 后一个坐标\r\n   * @returns \r\n   */\r\n  public getClasses([x1, y1]: Index, [x2, y2]: Index, [x3, y3]: Index) {\r\n\r\n    const classes = []\r\n\r\n    let dir1: dirNum | 0 = this.getSnakeBodyDirection([x1, y1], [x2, y2]),\r\n     dir2: dirNum | 0 = this.getSnakeBodyDirection([x2, y2], [x3, y3])\r\n    \r\n    // 蛇头 \r\n    if(dir1 === 0) {\r\n      // @ts-ignore\r\n      classes.push(SnakeClass.SNAKE_HEAD, SnakeClass[SnakeDirection[dir2]])\r\n    } \r\n    // 蛇尾\r\n    else if (dir2 === 0) {\r\n      // @ts-ignore\r\n      classes.push(SnakeClass.SNAKE_TAIL, SnakeClass[SnakeDirection[dir1]])\r\n    } \r\n    // 蛇身\r\n    else {\r\n      // 蛇身直行\r\n      if(dir1 === dir2) {\r\n        classes.push(SnakeClass.SNAKE_BODY_STR)\r\n        switch(dir1) {\r\n          case SnakeDirection.UP:\r\n            classes.push(SnakeClass.UP)\r\n            break\r\n          case SnakeDirection.RIGHT:\r\n            classes.push(SnakeClass.RIGHT)\r\n            break\r\n          case SnakeDirection.DOWN:\r\n            classes.push(SnakeClass.DOWN)\r\n            break\r\n          case SnakeDirection.LEFT:\r\n            classes.push(SnakeClass.LEFT)\r\n            break\r\n        }\r\n      } \r\n      // 蛇身转弯\r\n      else {\r\n        classes.push(SnakeClass.SNAKE_BODY_CUR)\r\n        // 右上弧\r\n        if ((dir1 === SnakeDirection.LEFT && dir2 === SnakeDirection.UP)\r\n        || (dir1 === SnakeDirection.DOWN && dir2 === SnakeDirection.RIGHT)) {\r\n          classes.push(SnakeClass.UP_RIGHT_QUADRANT)\r\n        }\r\n        // 右下弧\r\n        else if((dir1 === SnakeDirection.UP && dir2 === SnakeDirection.RIGHT)\r\n        || (dir1 === SnakeDirection.LEFT && dir2 === SnakeDirection.DOWN)) {\r\n          classes.push(SnakeClass.DOWN_RIGHT_QUADRANT)\r\n        }\r\n        // 左下弧\r\n        else if (\r\n          (dir1 === SnakeDirection.UP && dir2 === SnakeDirection.LEFT)\r\n          || (dir1 === SnakeDirection.RIGHT && dir2 === SnakeDirection.DOWN)) {\r\n          classes.push(SnakeClass.DOWN_LEFT_QUADRANT)\r\n        }\r\n        // 左上弧\r\n        else if ((dir1 === SnakeDirection.RIGHT && dir2 === SnakeDirection.UP)\r\n        || (dir1 === SnakeDirection.DOWN && dir2 === SnakeDirection.LEFT)) {\r\n          classes.push(SnakeClass.UP_LEFT_QUADRANT)\r\n        }\r\n\r\n      }\r\n    }\r\n    return classes\r\n  }\r\n\r\n  /**\r\n   * 获取前一节蛇身相对后一节的方向\r\n   * @param param0 \r\n   * @param param1 \r\n   * @returns \r\n   */\r\n  public getSnakeBodyDirection([x1, y1]: Index, [x2, y2]: Index) {\r\n    return this.snakeGame.getSnakeBodyDirection([x1, y1], [x2, y2])\r\n  }\r\n\r\n  /**\r\n   * 是否正在进行游戏\r\n   * @returns \r\n   */\r\n  public isGaming(): boolean {\r\n    return this.snakeGame.isGaming()\r\n  }\r\n\r\n  /**\r\n   * 暂停游戏\r\n   */\r\n  public pause () {\r\n    this.snakeGame.pause()\r\n    // 清除计时器和键盘事件\r\n    clearInterval(this.timer)\r\n    document.removeEventListener('keydown', this.changeDirection)\r\n    this.showCounter()\r\n    this.setCounterText('Pausing')\r\n    this.changeBtnText('Resume')\r\n  }\r\n\r\n  /**\r\n   * 是否正在暂停\r\n   * @returns \r\n   */\r\n  public isPausing () {\r\n    return this.snakeGame.isPausing()\r\n  }\r\n\r\n  /**\r\n   * 恢复游戏\r\n   */\r\n  public resume () {\r\n    this.snakeGame.resume()\r\n  }\r\n\r\n  /**\r\n   * 清除分数\r\n   */\r\n  public clearScore () {\r\n    this.snakeGame.clearScore()\r\n    this.changeScore()\r\n  }\r\n\r\n  /**\r\n   * 是否正在计时\r\n   * @returns \r\n   */\r\n  public isCounting () {\r\n    return this.counting\r\n  }\r\n\r\n  /**\r\n   * 显示遮罩层\r\n   */\r\n  public showCounter () {\r\n    this.dom.counter.classList.remove('hide')\r\n  }\r\n\r\n  /**\r\n   * 隐藏遮罩层\r\n   */\r\n  public hideCounter () {\r\n    this.dom.counter.classList.add('hide')\r\n  }\r\n\r\n  /**\r\n   * 设置遮罩层文字\r\n   * @param text \r\n   */\r\n  public setCounterText (text: string) {\r\n    this.dom.counter.innerText = text\r\n  }\r\n\r\n  /**\r\n   * 获得分数\r\n   * @returns \r\n   */\r\n  public getScore () {\r\n    return this.snakeGame.getScore()\r\n  }\r\n\r\n  /**\r\n   * 更改按钮文字\r\n   * @param text \r\n   */\r\n  public changeBtnText (text: string) {\r\n    this.dom.gameBtn.innerText = text\r\n  }\r\n}","import { Index } from \"../types/types\"\r\nimport { getRandomNumber } from \"../utils/getRandomNumber.js\"\r\n\r\nexport class Food {\r\n\r\n  private index: Index = [0, 0]\r\n\r\n  constructor(private width: number, private height: number) {\r\n    this.width = width\r\n    this.height = height\r\n    // this.newFood()\r\n  }\r\n\r\n  /**\r\n   * 生成新食物\r\n   * @param exception 不能生成食物的坐标（蛇）\r\n   * @returns \r\n   */\r\n  public newFood (exception?: Index[]) {\r\n    let index: Index\r\n\r\n    // 食物不能出现在蛇身上\r\n    // break标签：多层循环时可以用break指定退出的循环\r\n    outerLoop: while (true) {\r\n      index = [getRandomNumber(0, this.width), getRandomNumber(0, this.height)]\r\n      if(!exception) {\r\n        break\r\n      }\r\n      for(let i = 0; i < exception.length; i++) {\r\n        // 坐标相等\r\n        if((exception[i][0] === index[0]) && (exception[i][1] === index[1])) {\r\n          break\r\n        }\r\n        if(i === exception.length - 1) {\r\n          break outerLoop\r\n        }\r\n      }\r\n    }\r\n    \r\n    this.index = index\r\n  }\r\n\r\n  /**\r\n   * 获取食物的坐标\r\n   * @returns \r\n   */\r\n  public getFoodIndex() {\r\n    return this.index\r\n  }\r\n}","import { Snake, SnakeDirection } from \"./Snake.js\"\r\nimport { Food } from \"./Food.js\"\r\nimport type { Index, dirNum } from \"../types/types.js\"\r\n\r\nexport class SnakeGame {\r\n\r\n  private snake: Snake\r\n  private food: Food\r\n  private score: number = 0\r\n  private gaming: boolean = false\r\n  private pausing: boolean = false\r\n\r\n  /**\r\n   * \r\n   * @param width 一行的盒子数\r\n   * @param height 一列的盒子数\r\n   * @param container 容器\r\n   */\r\n  constructor(private width: number, private height: number) {\r\n    this.snake = new Snake(width, height)\r\n    this.food = new Food(width, height)\r\n  }\r\n\r\n  /**\r\n   * 开始游戏\r\n   */\r\n  public start() {\r\n    this.gaming = true\r\n    this.pausing = false\r\n    this.snake.newSnake()\r\n    this.food.newFood(this.getSnake())\r\n  }\r\n\r\n  /**\r\n   * 结束游戏\r\n   */\r\n  public over() {\r\n    this.gaming = false\r\n    this.pausing = false\r\n  }\r\n\r\n  /**\r\n   * 蛇移动\r\n   * @returns false：撞到边界或自己   'eat'：吃到食物   true：正常移动\r\n   */\r\n  public move(): boolean | 'eat' {\r\n    // 蛇无法移动（撞到边界或自己），结束游戏\r\n    if(!this.snake.move()) {\r\n      this.over()\r\n      return false\r\n    } else {\r\n      // 在这次移动中，蛇吃到了食物\r\n      if(this.eat()) {\r\n        return 'eat'\r\n      } else {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 蛇吃食物\r\n   * @returns true：吃到食物   false：没吃到\r\n   */\r\n  public eat(): boolean {\r\n\r\n    /**\r\n     * 蛇是否吃到食物\r\n     * @returns \r\n     */\r\n    const isAvalibleEat = ()=> {\r\n      const snakeHead = this.snake.getSnake()[0]\r\n      // 蛇头碰到食物\r\n      if (snakeHead[0] === this.food.getFoodIndex()[0] && snakeHead[1] === this.food.getFoodIndex()[1]) {\r\n        return true\r\n      }\r\n      return false\r\n    }\r\n\r\n    // 蛇成功吃到食物\r\n    if(isAvalibleEat()) {\r\n      this.snake.eat()\r\n      this.score++\r\n      this.food.newFood(this.snake.getSnake())\r\n      return true\r\n    } \r\n    // 蛇没有吃到食物\r\n    else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 改变蛇头的方向\r\n   * @param direction \r\n   */\r\n  public changeDirection(direction: dirNum) {\r\n    this.snake.changeDirection(direction)\r\n  }\r\n\r\n  /**\r\n   * 是否正在进行游戏\r\n   * @returns \r\n   */\r\n  public isGaming(): boolean {\r\n    return this.gaming\r\n  }\r\n\r\n  /**\r\n   * 获取蛇的长度\r\n   * @returns \r\n   */\r\n  public getSnakeLength(): number {\r\n    return this.snake.getSnakeLength()\r\n  }\r\n\r\n  /**\r\n   * 获取蛇\r\n   * @returns \r\n   */\r\n  public getSnake(): Index[] {\r\n    return this.snake.getSnake()\r\n  }\r\n\r\n  /**\r\n   * 获取食物\r\n   */\r\n  public getFood(): Index {\r\n    return this.food.getFoodIndex()\r\n  }\r\n\r\n  /**\r\n   * 获取分数\r\n   */\r\n  public getScore(): number {\r\n    return this.score\r\n  }\r\n\r\n  /**\r\n   * 获取前一节蛇相比后一节的走向\r\n   * @param param0 前一节\r\n   * @param param1 后一节\r\n   * @returns \r\n   */\r\n  public getSnakeBodyDirection([x1, y1]: Index, [x2, y2]: Index) {\r\n    return this.snake.getBodyDirection([x1, y1], [x2, y2])\r\n  }\r\n\r\n  /**\r\n   * 是否正在暂停\r\n   * @returns \r\n   */\r\n  public isPausing () {\r\n    return this.pausing\r\n  }\r\n\r\n  /**\r\n   * 暂停\r\n   */\r\n  public pause () {\r\n    this.pausing = true\r\n  }\r\n\r\n  /**\r\n   * 恢复\r\n   */\r\n  public resume () {\r\n    this.pausing = false\r\n  }\r\n\r\n  /**\r\n   * 清除分数\r\n   */\r\n  public clearScore () {\r\n    this.score = 0\r\n  }\r\n}","// @ts-ignore\r\nimport './styles/index.css'\r\nimport { SnakeGameDOM } from './ts/SnakeGameDOM.js'\r\n\r\nconst gameContainer = document.querySelector('.game')\r\nconst counter = document.querySelector('.mask')\r\nconst score = document.querySelector('#score')\r\nconst btn = document.querySelector('#start')\r\n// const ok = document.querySelector('#ok')\r\n\r\nnew SnakeGameDOM(20, 20, {\r\n  container: gameContainer as HTMLDivElement,\r\n  score: score as HTMLDivElement,\r\n  counter: counter as HTMLDivElement,\r\n  gameBtn: btn as HTMLElement,\r\n})\r\n\r\n// ok?.addEventListener('click', () => {\r\n//   document.querySelector('dialog')?.close()\r\n// }, {\r\n//   once: true\r\n// })"],"names":["getRandomNumber","min","max","Math","floor","random","SnakeDirection","SnakeClass","Snake","constructor","width","height","this","snakeIndex","perviousLastIndex","dir","go","newSnake","isAvalibleBody","direction","x","y","x2","y2","x3","y3","getNextIndex","isOut","getRandomDirection","x1","y1","res","getBodyDirection","push","changeDirection","isAvalibleDiretion","isCrash","i","length","getLastIndex","move","unshift","pop","eat","getSnake","getSnakeLength","UP","RIGHT","DOWN","LEFT","Food","index","newFood","exception","outerLoop","getFoodIndex","SnakeGame","score","gaming","pausing","snake","food","start","over","snakeHead","isAvalibleEat","isGaming","getFood","getScore","getSnakeBodyDirection","isPausing","pause","resume","clearScore","gameContainer","document","querySelector","counter","btn","dom","box","counting","snakeGame","init","getBoxSize","clickGameBtn","changeBtnText","createElement","fragment","createDocumentFragment","append","container","gameBtn","addEventListener","isCounting","drawSnake","drawFood","countDown","then","timer","setInterval","bind","Promise","resolve","setCounterText","count","showCounter","toString","clearInterval","hideCounter","removeEventListener","alert","changeScore","e","key","innerText","String","wNum","hNum","getBoundingClientRect","replaceChildren","classes","getClasses","createBox","appendChild","FOOD","div","classList","add","style","top","left","dir1","dir2","SNAKE_HEAD","SNAKE_TAIL","SNAKE_BODY_STR","SNAKE_BODY_CUR","UP_RIGHT_QUADRANT","DOWN_RIGHT_QUADRANT","DOWN_LEFT_QUADRANT","UP_LEFT_QUADRANT","remove","text"],"mappings":"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"}